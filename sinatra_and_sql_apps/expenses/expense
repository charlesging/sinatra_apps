#! /usr/bin/env ruby

require 'pg'
require 'io/console'
require 'pry'


class ExpenseData

  def initialize
    @connection = PG.connect(dbname: "expenses")
    setup_schema
  end

  def setup_schema
    sql = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';"
    # binding.pry
    table_count = @connection.exec(sql).field_values("count").first.to_i

    if table_count.zero?
      # create the expenses table
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY, 
          amount numeric(6,2) NOT NULL CHECK (amount > 0),
          memo text NOT NULL, 
          created_on date NOT NULL
        );
      SQL
    end
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_for(query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    matches = @connection.exec_params(sql, ["%#{query}%"])

    display_count(matches)
    display_expenses(matches) if matches.ntuples > 0
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1"
    to_delete = @connection.exec_params(sql, [id])

    if to_delete.ntuples == 1
      @connection.exec_params("DELETE FROM expenses WHERE id = $1", [id])
      display_deleted_message(to_delete)
    else
      puts "There is no expense with the id '#{id}'"
    end
  end

  def clear_expenses
    choice = verify_destructive_action
    case choice
    when 'y'
      @connection.exec("DELETE FROM expenses;")
      puts "All expenses have been deleted."
    else
      puts "Whew!! Nothing was touched."
    end
  end

  def list_expenses
    expenses = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    display_count(expenses)
    display_expenses(expenses) if expenses.ntuples > 0
  end

  private

  def verify_destructive_action
    choice = nil
    loop do
      puts "This will remove all expenses. Are you sure? (y/n)"   
      choice = $stdin.getch
      break if %w[y n].include?(choice)
    end
    choice
  end

  def display_deleted_message(expense)
    puts "The following expense has been deleted:"
    display_expenses(expense)
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [
        tuple['id'].rjust(3),
        tuple['created_on'].rjust(12),
        tuple['amount'].rjust(8),
        tuple['memo']
      ]
      puts columns.join(' | ')
    end

    puts '*' * 50
    amount_sum = expenses.field_values('amount').map(&:to_f).inject(:+)
    puts "Total #{amount_sum.to_s.rjust(25)}"
  end

  def display_count(expenses)
    count = expenses.ntuples
    if count == 0
      puts "There are no expenses."
    else
      puts "There are #{count} expense#{'s' if count != 1}."
    end
  end
end


class CLI

  def initialize
    @data = ExpenseData.new
  end

  def run(arguments)
    command = arguments.shift

    case command
    when "clear"
      @data.clear_expenses
    when "delete"
      id = arguments[0]
      @data.delete_expense(id)
    when "search"
      @data.search_for(arguments[0])
    when "add"
      amount = arguments[1]
      memo = arguments[2]
      abort "You must provide an amount and memo." unless amount && memo
      @data.add_expense(amount, memo)
    when "list"
      @data.list_expenses
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)


